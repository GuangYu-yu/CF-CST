name: 构建 cfspeed
on:  
  workflow_dispatch:   # 允许手动触发

jobs:  
  build:  
    name: 构建  
    runs-on: ubuntu-latest  

    steps:  
      - name: 检出代码  
        uses: actions/checkout@v4  

      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

      - name: 设置 Docker
        uses: docker/setup-buildx-action@v3

      - name: 使用 OpenWrt SDK 构建
        run: |
          # 创建构建目录和存储目录
          mkdir -p build
          mkdir -p binaries
          
          # 复制源代码到工作目录
          mkdir -p openwrt_build
          cp cfspeed.go openwrt_build/
          
          # 创建 Dockerfile 用于 OpenWrt 构建环境
          cat > openwrt_build/Dockerfile << 'EOF'
          FROM openwrt/sdk:x86_64-23.05.0
          
          # 安装必要的包
          RUN opkg update && opkg install go upx
          
          # 设置工作目录
          WORKDIR /build
          
          # 复制源代码
          COPY cfspeed.go .
          
          # 初始化 Go 模块
          RUN go mod init cfspeed && \
              go get github.com/olekukonko/tablewriter && \
              go mod tidy
          
          # 构建函数
          RUN mkdir -p output
          
          # 构建各种架构
          RUN export GOOS=linux GOARCH=amd64 && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_amd64 cfspeed.go && \
              upx --best output/cfspeed_linux_amd64 || true
          
          RUN export GOOS=linux GOARCH=386 && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_386 cfspeed.go && \
              upx --best output/cfspeed_linux_386 || true
          
          RUN export GOOS=linux GOARCH=arm64 && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_arm64 cfspeed.go && \
              upx --best output/cfspeed_linux_arm64 || true
          
          RUN export GOOS=linux GOARCH=arm && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_arm cfspeed.go && \
              upx --best output/cfspeed_linux_arm || true
          
          RUN export GOOS=linux GOARCH=mips GOMIPS=softfloat && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_mips cfspeed.go && \
              upx --best output/cfspeed_linux_mips || true
          
          RUN export GOOS=linux GOARCH=mipsle GOMIPS=softfloat && \
              go build -ldflags="-s -w" -o output/cfspeed_linux_mipsle cfspeed.go && \
              upx --best output/cfspeed_linux_mipsle || true
          
          RUN export GOOS=windows GOARCH=amd64 && \
              go build -ldflags="-s -w" -o output/cfspeed_windows_amd64.exe cfspeed.go && \
              upx --best output/cfspeed_windows_amd64.exe || true
          
          RUN export GOOS=windows GOARCH=386 && \
              go build -ldflags="-s -w" -o output/cfspeed_windows_386.exe cfspeed.go && \
              upx --best output/cfspeed_windows_386.exe || true
          
          RUN export GOOS=darwin GOARCH=amd64 && \
              go build -ldflags="-s -w" -o output/cfspeed_darwin_amd64 cfspeed.go
          
          RUN export GOOS=darwin GOARCH=arm64 && \
              go build -ldflags="-s -w" -o output/cfspeed_darwin_arm64 cfspeed.go
          
          # 为 OpenWrt 特别构建
          RUN export GOOS=linux GOARCH=mips GOMIPS=softfloat && \
              go build -ldflags="-s -w" -o output/cfspeed_openwrt_mips cfspeed.go && \
              upx --best output/cfspeed_openwrt_mips || true
          
          RUN export GOOS=linux GOARCH=mipsle GOMIPS=softfloat && \
              go build -ldflags="-s -w" -o output/cfspeed_openwrt_mipsle cfspeed.go && \
              upx --best output/cfspeed_openwrt_mipsle || true
          
          RUN export GOOS=linux GOARCH=arm && \
              go build -ldflags="-s -w" -o output/cfspeed_openwrt_arm cfspeed.go && \
              upx --best output/cfspeed_openwrt_arm || true
          
          RUN export GOOS=linux GOARCH=aarch64 && \
              go build -ldflags="-s -w" -o output/cfspeed_openwrt_aarch64 cfspeed.go && \
              upx --best output/cfspeed_openwrt_aarch64 || true
          
          # 生成校验和
          RUN cd output && sha256sum * > sha256sum.txt
          EOF
          
          # 构建 Docker 镜像并运行
          cd openwrt_build
          docker build -t cfspeed-builder .
          
          # 从容器中复制构建结果
          docker create --name cfspeed-container cfspeed-builder
          docker cp cfspeed-container:/build/output/. ../build/
          docker rm cfspeed-container
          
          # 复制二进制文件到 binaries 目录
          cp build/cfspeed_* binaries/
          
          # 创建压缩包
          cd build
          for file in cfspeed_*; do
            if [[ "$file" != *.txt ]]; then
              tar -czf "${file}.tar.gz" "$file"
            fi
          done

      - name: 提交并推送更改
        if: success()
        run: |
          if [ -d "binaries" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git pull origin main --no-rebase || git pull origin master --no-rebase
            git add binaries/
            current_time=$(date '+%Y/%m/%d %H:%M:%S')
            if ! git diff --staged --quiet; then
              git commit -m "更新二进制文件 ${current_time}"
              git push
            fi
          fi

      - name: 上传构建产物  
        uses: actions/upload-artifact@v4
        with:  
          name: cfspeed-构建产物  
          path: build/*  

      - name: 创建发布版本  
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch'  
        with:  
          tag_name: v${{ github.run_number }}  
          name: Cloudflare CIDR 测速工具 v${{ github.run_number }}  
          draft: false  
          prerelease: false  
          files: |  
            build/*.tar.gz  
            build/sha256sum.txt  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
